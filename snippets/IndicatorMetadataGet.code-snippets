{
    "Get Indicator Attributes": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "indicator.get(params={'fields': ['attributes']})",
            "",
            "# get first 1k indicator attributes",
            "for attribute in indicator.model.attributes.data or []:",
            "    print(attribute.type, attribute.value)"
        ],
        "description": "This snippet will get a Indicator from ThreatConnect with nested attribute. However, the indicator will only have the first 1k attributes, which is typically more attributes than any TI object should have.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-attributes"
        ],
        "scope": "python"
    },
    "Get Indicator Attributes Iteration": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "",
            "# iterate over all indicator attributes",
            "for attribute in indicator.attributes:",
            "    print(attribute.model.type, attribute.model.value)"
        ],
        "description": "This snippet will will iterate over all indicator attributes.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-attributes-iteration"
        ],
        "scope": "python"
    },
    "Get Indicator Security Labels": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "indicator.get(params={'fields': ['securityLabels']})",
            "",
            "# get first 1k indicator security labels",
            "for security_label in indicator.model.security_labels.data or []:",
            "    print(security_label.name)"
        ],
        "description": "This snippet will get a Indicator from ThreatConnect with nested security labels. However, the indicator will only have the first 1k security labels, which is typically more security labels than any TI object should have.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-security-labels"
        ],
        "scope": "python"
    },
    "Get Indicator Security Label Iteration": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "",
            "# iterate over all indicator security labels",
            "for security_label in indicator.security_labels:",
            "    print(security_label.model.name)"
        ],
        "description": "This snippet will will iterate over all indicator security labels.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-security-label-iteration"
        ],
        "scope": "python"
    },
    "Get Indicator Tags": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "indicator.get(params={'fields': ['tags']})",
            "",
            "# get first 1k indicator tags",
            "for tag in indicator.model.tags.data or []:",
            "    print(tag.name)"
        ],
        "description": "This snippet will get a Indicator from ThreatConnect with nested tags. However, the indicator will only have the first 1k tags, which is typically more tags than any TI object should have.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-tags"
        ],
        "scope": "python"
    },
    "Get Indicator Tags Iteration": {
        "body": [
            "indicator = self.tcex.api.tc.v3.indicator(id=indicator_id)",
            "",
            "# iterate over all indicator tags",
            "for tag in indicator.tags:",
            "    print(tag.model.name)"
        ],
        "description": "This snippet will will iterate over all indicator tags.",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-get-indicator-tags-iteration"
        ],
        "scope": "python"
    },
    "Filter Indicator": {
        "body": [
            "indicators = self.tcex.api.tc.v3.indicators()",
            "",
            "indicators.filter.active_locked_boolean(TQLOperator.EQ, active_locked_boolean)",
            "indicators.filter.address_asn_integer(TQLOperator.EQ, address_asn_integer)",
            "indicators.filter.address_cidr_stringcidr(TQLOperator.EQ, address_cidr_stringcidr)",
            "indicators.filter.address_city_string(TQLOperator.EQ, address_city_string)",
            "indicators.filter.address_country_code_string(TQLOperator.EQ, address_country_code_string)",
            "indicators.filter.address_country_name_string(TQLOperator.EQ, address_country_name_string)",
            "indicators.filter.address_ip_val_biginteger(TQLOperator.EQ, address_ip_val_biginteger)",
            "indicators.filter.address_is_ipv6_boolean(TQLOperator.EQ, address_is_ipv6_boolean)",
            "indicators.filter.address_registering_org_string(TQLOperator.EQ, address_registering_org_string)",
            "indicators.filter.address_state_string(TQLOperator.EQ, address_state_string)",
            "indicators.filter.address_timezone_string(TQLOperator.EQ, address_timezone_string)",
            "indicators.filter.associated_group_integer(TQLOperator.EQ, associated_group_integer)",
            "indicators.filter.attribute_undefined(TQLOperator.EQ, attribute_undefined)",
            "indicators.filter.confidence_integer(TQLOperator.EQ, confidence_integer)",
            "indicators.filter.date_added_datetime(TQLOperator.EQ, date_added_datetime)",
            "indicators.filter.description_string(TQLOperator.EQ, description_string)",
            "indicators.filter.false_positive_count_integer(TQLOperator.EQ, false_positive_count_integer)",
            "indicators.filter.file_size_biginteger(TQLOperator.EQ, file_size_biginteger)",
            "indicators.filter.has_artifact_integer(TQLOperator.EQ, has_artifact_integer)",
            "indicators.filter.has_attribute_integer(TQLOperator.EQ, has_attribute_integer)",
            "indicators.filter.has_case_integer(TQLOperator.EQ, has_case_integer)",
            "indicators.filter.has_group_integer(TQLOperator.EQ, has_group_integer)",
            "indicators.filter.has_indicator_integer(TQLOperator.EQ, has_indicator_integer)",
            "indicators.filter.has_security_label_integer(TQLOperator.EQ, has_security_label_integer)",
            "indicators.filter.has_tag_integer(TQLOperator.EQ, has_tag_integer)",
            "indicators.filter.has_victim_integer(TQLOperator.EQ, has_victim_integer)",
            "indicators.filter.has_victim_asset_integer(TQLOperator.EQ, has_victim_asset_integer)",
            "indicators.filter.host_dns_active_boolean(TQLOperator.EQ, host_dns_active_boolean)",
            "indicators.filter.host_whois_active_boolean(TQLOperator.EQ, host_whois_active_boolean)",
            "indicators.filter.id_integer(TQLOperator.EQ, id_integer)",
            "indicators.filter.indicator_active_boolean(TQLOperator.EQ, indicator_active_boolean)",
            "indicators.filter.last_false_positive_datetime(TQLOperator.EQ, last_false_positive_datetime)",
            "indicators.filter.last_modified_datetime(TQLOperator.EQ, last_modified_datetime)",
            "indicators.filter.last_observed_datetime(TQLOperator.EQ, last_observed_datetime)",
            "indicators.filter.observation_count_integer(TQLOperator.EQ, observation_count_integer)",
            "indicators.filter.owner_integer(TQLOperator.EQ, owner_integer)",
            "indicators.filter.owner_name_string(TQLOperator.EQ, owner_name_string)",
            "indicators.filter.rating_integer(TQLOperator.EQ, rating_integer)",
            "indicators.filter.security_label_string(TQLOperator.EQ, security_label_string)",
            "indicators.filter.source_string(TQLOperator.EQ, source_string)",
            "indicators.filter.summary_string(TQLOperator.EQ, summary_string)",
            "indicators.filter.tag_stringlower(TQLOperator.EQ, tag_stringlower)",
            "indicators.filter.tag_owner_integer(TQLOperator.EQ, tag_owner_integer)",
            "indicators.filter.tag_owner_name_string(TQLOperator.EQ, tag_owner_name_string)",
            "indicators.filter.threat_assess_score_integer(TQLOperator.EQ, threat_assess_score_integer)",
            "indicators.filter.type_integer(TQLOperator.EQ, type_integer)",
            "indicators.filter.type_name_string(TQLOperator.EQ, type_name_string)",
            "indicators.filter.value1_string(TQLOperator.EQ, value1_string)",
            "indicators.filter.value2_string(TQLOperator.EQ, value2_string)",
            "indicators.filter.value3_string(TQLOperator.EQ, value3_string)",
            "indicators.filter.vt_last_updated_datetime(TQLOperator.EQ, vt_last_updated_datetime)",
            "indicators.filter.vt_malicious_count_integer(TQLOperator.EQ, vt_malicious_count_integer)",
            "",
            "for indicator in indicators:",
            "    print(indicator.model.dict())"
        ],
        "description": "This snippet will show all of the filter options for a ThreatConnect indicator",
        "prefix": [
            "_tcs",
            "_tcs-ti",
            "_tcs-ti-indicator-filter-indicator"
        ],
        "scope": "python"
    }
}